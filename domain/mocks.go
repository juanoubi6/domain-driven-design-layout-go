package domain

import (
	"context"
	"domain-driven-design-layout/domain/entities"
	"github.com/stretchr/testify/mock"
)

// CreateUserMock is an autogenerated mock type for the CreateUserMock type
type CreateUserMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *CreateUserMock) Execute(_a0 entities.UserPrototype) (entities.User, error) {
	ret := _m.Called(_a0)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.UserPrototype) entities.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.UserPrototype) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserMock is an autogenerated mock type for the DeleteUserMock type
type DeleteUserMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *DeleteUserMock) Execute(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserByIdMock is an autogenerated mock type for the FindUserById type
type FindUserByIdMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *FindUserByIdMock) Execute(_a0 int64) (*entities.User, error) {
	ret := _m.Called(_a0)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(int64) *entities.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUsersByIdListMock is an autogenerated mock type for the FindUsersByIdListMock type
type FindUsersByIdListMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *FindUsersByIdListMock) Execute(_a0 []int64) ([]entities.User, error) {
	ret := _m.Called(_a0)

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func([]int64) []entities.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserMock is an autogenerated mock type for the UpdateUserMock type
type UpdateUserMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: user
func (_m *UpdateUserMock) Execute(user entities.User) (entities.User, error) {
	ret := _m.Called(user)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAddressMock is an autogenerated mock type for the CreateAddress type
type CreateAddressMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: userID, prototype
func (_m *CreateAddressMock) Execute(userID int64, prototype entities.AddressPrototype) (entities.Address, error) {
	ret := _m.Called(userID, prototype)

	var r0 entities.Address
	if rf, ok := ret.Get(0).(func(int64, entities.AddressPrototype) entities.Address); ok {
		r0 = rf(userID, prototype)
	} else {
		r0 = ret.Get(0).(entities.Address)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, entities.AddressPrototype) error); ok {
		r1 = rf(userID, prototype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddressMock is an autogenerated mock type for the DeleteAddress type
type DeleteAddressMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *DeleteAddressMock) Execute(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAddressByIdMock is an autogenerated mock type for the FindAddress type
type FindAddressByIdMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *FindAddressByIdMock) Execute(id int64) (*entities.Address, error) {
	ret := _m.Called(id)

	var r0 *entities.Address

	if ret.Get(0) != nil {
		r0 = ret.Get(0).(*entities.Address)
	} else {
		r0 = nil
	}

	return r0, ret.Error(1)
}

// TxRepositoryCreatorMock is an autogenerated mock type for the TxRepositoryCreator type
type TxRepositoryCreatorMock struct {
	mock.Mock
}

// CreateTxMainDatabase provides a mock function with given fields: ctx
func (_m *TxRepositoryCreatorMock) CreateTxMainDatabase(ctx context.Context) (entities.MainDatabase, error) {
	ret := _m.Called(ctx)

	var r0 entities.MainDatabase
	if rf, ok := ret.Get(0).(func(context.Context) entities.MainDatabase); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.MainDatabase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MainDatabaseMock is an autogenerated mock type for the MainDatabase type
type MainDatabaseMock struct {
	mock.Mock
}

// CreateAddress provides a mock function with given fields: userID, addressPrototype
func (_m *MainDatabaseMock) CreateAddress(userID int64, addressPrototype entities.AddressPrototype) (entities.Address, error) {
	ret := _m.Called(userID, addressPrototype)

	var r0 entities.Address
	if rf, ok := ret.Get(0).(func(int64, entities.AddressPrototype) entities.Address); ok {
		r0 = rf(userID, addressPrototype)
	} else {
		r0 = ret.Get(0).(entities.Address)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, entities.AddressPrototype) error); ok {
		r1 = rf(userID, addressPrototype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: userPrototype
func (_m *MainDatabaseMock) CreateUser(userPrototype entities.UserPrototype) (entities.User, error) {
	ret := _m.Called(userPrototype)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.UserPrototype) entities.User); ok {
		r0 = rf(userPrototype)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.UserPrototype) error); ok {
		r1 = rf(userPrototype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddress provides a mock function with given fields: addressID
func (_m *MainDatabaseMock) DeleteAddress(addressID int64) error {
	ret := _m.Called(addressID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userID
func (_m *MainDatabaseMock) DeleteUser(userID int64) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserAddresses provides a mock function with given fields: userID
func (_m *MainDatabaseMock) DeleteUserAddresses(userID int64) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddress provides a mock function with given fields: addressID
func (_m *MainDatabaseMock) GetAddress(addressID int64) (*entities.Address, error) {
	ret := _m.Called(addressID)

	var r0 *entities.Address
	if rf, ok := ret.Get(0).(func(int64) *entities.Address); ok {
		r0 = rf(addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *MainDatabaseMock) GetUser(userID int64) (*entities.User, error) {
	ret := _m.Called(userID)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(int64) *entities.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: userIDs
func (_m *MainDatabaseMock) GetUsers(userIDs []int64) ([]entities.User, error) {
	ret := _m.Called(userIDs)

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func([]int64) []entities.User); ok {
		r0 = rf(userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *MainDatabaseMock) UpdateUser(user entities.User) (entities.User, error) {
	ret := _m.Called(user)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function
func (_m *MainDatabaseMock) CommitTx() error {
	ret := _m.Called()

	return ret.Error(0)
}

// RollbackTx provides a mock function
func (_m *MainDatabaseMock) RollbackTx() error {
	ret := _m.Called()

	return ret.Error(0)
}
