package domain

import (
	"domain-driven-design-layout/domain/entities"
	"github.com/stretchr/testify/mock"
)

// UserRepositoryMock is an autogenerated mock type for the UserRepositoryMock type
type UserRepositoryMock struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *UserRepositoryMock) CreateUser(_a0 entities.UserPrototype) (entities.User, error) {
	ret := _m.Called(_a0)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.UserPrototype) entities.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.UserPrototype) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *UserRepositoryMock) DeleteUser(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: _a0
func (_m *UserRepositoryMock) GetUser(_a0 int64) (entities.User, error) {
	ret := _m.Called(_a0)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(int64) entities.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: _a0
func (_m *UserRepositoryMock) GetUsers(_a0 []int64) ([]entities.User, error) {
	ret := _m.Called(_a0)

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func([]int64) []entities.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *UserRepositoryMock) UpdateUser(_a0 entities.User) (entities.User, error) {
	ret := _m.Called(_a0)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserMock is an autogenerated mock type for the CreateUserMock type
type CreateUserMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *CreateUserMock) Execute(_a0 entities.UserPrototype) (entities.User, error) {
	ret := _m.Called(_a0)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.UserPrototype) entities.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.UserPrototype) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
