// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entities "domain-driven-design-layout/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryMock is an autogenerated mock type for the UserRepositoryMock type
type UserRepositoryMock struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, userPrototype
func (_m *UserRepositoryMock) CreateUser(ctx entities.ApplicationContext, userPrototype entities.UserPrototype) (entities.User, error) {
	ret := _m.Called(ctx, userPrototype)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.ApplicationContext, entities.UserPrototype) entities.User); ok {
		r0 = rf(ctx, userPrototype)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ApplicationContext, entities.UserPrototype) error); ok {
		r1 = rf(ctx, userPrototype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *UserRepositoryMock) DeleteUser(ctx entities.ApplicationContext, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ApplicationContext, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *UserRepositoryMock) GetUser(ctx entities.ApplicationContext, userID int64) (*entities.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(entities.ApplicationContext, int64) *entities.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ApplicationContext, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, userIDs
func (_m *UserRepositoryMock) GetUsers(ctx entities.ApplicationContext, userIDs []int64) ([]entities.User, error) {
	ret := _m.Called(ctx, userIDs)

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func(entities.ApplicationContext, []int64) []entities.User); ok {
		r0 = rf(ctx, userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ApplicationContext, []int64) error); ok {
		r1 = rf(ctx, userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserRepositoryMock) UpdateUser(ctx entities.ApplicationContext, user entities.User) (entities.User, error) {
	ret := _m.Called(ctx, user)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.ApplicationContext, entities.User) entities.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.ApplicationContext, entities.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
